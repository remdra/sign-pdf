import { PdfSigner } from "../../src/signer/pdf-signer";
import {
  SignatureComputerSettings,
  SignerSettings,
} from "../../src/models/settings";
import { SignatureComputer } from "../../src/signer/signature-computer";
import { SignatureParameters } from "../../src/models/parameters";

import { bufferReplace } from "./buffer-helpers";
import { commonAssets } from "../_run-assets/_assets-common";

import { PDFDocument } from "pdf-lib";
import PdfPrinter = require("pdfmake");
import streamBuffers = require("stream-buffers");

function getText(pageIndex: number, pageCount: number, lib: string) {
  return pageCount == 1
    ? `PDF signing test document generated by ${lib}.`
    : `[Page ${pageIndex + 1}] PDF signing test document generated by ${lib}.`;
}

export async function generatePdfAsync({
  pageCount,
}: { pageCount?: number } = {}): Promise<Buffer> {
  return await generatePdf17Async({ pageCount });
}

export async function generatePdf13Async({
  pageCount,
}: { pageCount?: number } = {}): Promise<Buffer> {
  return await generatePdfWithPdfMakeAsync({ pageCount });
}

export async function generatePdf17Async({
  pageCount,
}: { pageCount?: number } = {}): Promise<Buffer> {
  return await generatePdfWithPdfLibAsync({
    pageCount,
    useObjectStreams: false,
  });
}

export async function generatePdf17StreamsAsync({
  pageCount,
}: { pageCount?: number } = {}): Promise<Buffer> {
  return await generatePdfWithPdfLibAsync({
    pageCount,
    useObjectStreams: true,
  });
}

async function generatePdfWithPdfLibAsync({
  pageCount,
  useObjectStreams,
}: { pageCount?: number; useObjectStreams?: boolean } = {}): Promise<Buffer> {
  const pdfDoc = await PDFDocument.create();
  pdfDoc.setProducer("SignPdfLib");
  pdfDoc.setCreator("SignPdfLib");
  pdfDoc.setCreationDate(new Date(2023, 1, 23, 9, 0, 0));
  pdfDoc.setModificationDate(new Date(2023, 1, 23, 9, 0, 0));

  pageCount = pageCount || 1;
  for (let i = 0; i < pageCount; i++) {
    const page = pdfDoc.addPage();
    const fontSize = 10;
    const text = getText(i, pageCount, "PDFLib");
    page.drawText(text, {
      x: 50,
      y: page.getSize().height - 4 * fontSize,
      size: fontSize,
    });
    /*
        page.drawLine({ start: { x:  50, y: page.getSize().height - 100 }, end: { x: 264, y: page.getSize().height - 100 } });
        page.drawLine({ start: { x: 264, y: page.getSize().height - 100 }, end: { x: 264, y: page.getSize().height - 170 } });
        page.drawLine({ start: { x: 264, y: page.getSize().height - 170 }, end: { x:  50, y: page.getSize().height - 170 } });
        page.drawLine({ start: { x:  50, y: page.getSize().height - 170 }, end: { x:  50, y: page.getSize().height - 100 } });
*/
  }

  useObjectStreams = useObjectStreams == undefined ? false : useObjectStreams;
  return Buffer.from(await pdfDoc.save({ useObjectStreams }));
}

async function generatePdfWithPdfMakeAsync({
  pageCount,
}: { pageCount?: number } = {}): Promise<Buffer> {
  const fonts = {
    Helvetica: {
      normal: "Helvetica",
      bold: "Helvetica-Bold",
      italics: "Helvetica-Oblique",
      bolditalics: "Helvetica-BoldOblique",
    },
  };

  pageCount = pageCount || 1;

  const printer = new PdfPrinter(fonts);

  const docDefinition: any = {
    info: {
      title: "SignPdfLib Test Document",
      author: "SignPdfLib",
      creator: "SignPdfLib",
      producer: "SignPdfLib",
      creationDate: new Date(2023, 1, 23, 9, 0, 0),
      modDate: new Date(2023, 1, 23, 9, 0, 0),
    },
    content: [getText(0, pageCount, "PdfMake")],
    defaultStyle: {
      font: "Helvetica",
    },
  };

  for (let i = 1; i < pageCount; i++) {
    docDefinition.content.push({
      text: getText(0, pageCount, "PdfMake"),
      pageBreak: "before",
    });
  }

  const pdfDoc = printer.createPdfKitDocument(docDefinition);
  const streamBuffer = new streamBuffers.WritableStreamBuffer();
  pdfDoc.pipe(streamBuffer);
  pdfDoc.end();
  return new Promise((resolve) => {
    pdfDoc.on("end", () => {
      resolve(streamBuffer.getContents() as Buffer);
    });
  });
}

export async function generatePlaceholderPdfAsync(
  pdf: Buffer
): Promise<Buffer> {
  const pdfSigner = createPdfSigner();
  const signDate: Date = new Date(2023, 1, 20, 18, 47, 35);

  return await pdfSigner.addPlaceholderAsync(pdf, {
    pageNumber: 1,
    name: "Signature",
    signature: { date: signDate },
  });
}

export async function generateFieldPdfAsync(pdf: Buffer): Promise<Buffer> {
  const pdfSigner = createPdfSigner();

  return await pdfSigner.addFieldAsync(pdf, {
    pageNumber: 1,
    name: "Signature",
    rectangle: { left: 50, top: 100, right: 50 + 214, bottom: 100 + 70 },
  });
}

export async function generateSignedFieldPdfAsync(
  fieldPdf: Buffer
): Promise<Buffer> {
  return await generateSignedPdfAsync(fieldPdf, { name: "Signature2" });
}

export async function generateSignedPdfAsync(
  pdf: Buffer,
  { name }: { name?: string } = {}
): Promise<Buffer> {
  const pdfSigner = createPdfSigner();
  const signature: SignatureParameters = {
    name: "Test Signer",
    location: "Timisoara",
    reason: "Signing",
    date: new Date(2023, 1, 20, 18, 47, 35),
    contactInfo: "signer@semnezonline.ro",
  };

  name = name || "Signature";

  return await pdfSigner.signAsync(pdf, { pageNumber: 1, name, signature });
}

export async function generateSignedTwicePdfAsync(
  pdf: Buffer
): Promise<Buffer> {
  const signedPdf = await generateSignedPdfAsync(pdf, { name: "Signature1" });
  return await generateSignedPdfAsync(signedPdf, { name: "Signature2" });
}

export async function generateTamperedPdfAsync(
  signedPdf: Buffer
): Promise<Buffer> {
  return bufferReplace(
    signedPdf,
    "signer@semnezonline.ro",
    "xxxxxx@xxxxxxxxxxxx.xx"
  );
}

export async function generateOnlyFirstTamperedPdfAsync(
  tamperedSignedPdf: Buffer
): Promise<Buffer> {
  return await generateSignedPdfAsync(tamperedSignedPdf, {
    name: "Signature2",
  });
}

export async function generateAppendTamperedPdfAsync(
  signedPdf: Buffer
): Promise<Buffer> {
  return Buffer.concat([signedPdf, signedPdf]);
}

export function generateSignature(placeholderPdf: Buffer): Buffer {
  const signatureComputer = createSignatureComputer();
  const signDate: Date = new Date(2023, 1, 20, 18, 47, 35);

  const signBuffer = Buffer.concat([
    placeholderPdf.subarray(0, placeholderPdf.indexOf("<AA")),
    placeholderPdf.subarray(placeholderPdf.indexOf("AA>") + 3),
  ]);
  return signatureComputer.computeSignature(signBuffer, signDate);
}

function createPdfSigner() {
  const signerSettings: SignerSettings = {
    signature: {
      signatureLength: 4096,
      rangePlaceHolder: 99999,
    },
    signatureComputer: {
      certificate: commonAssets.p12Certificate,
      password: "password",
    },
  };
  return new PdfSigner(signerSettings);
}

function createSignatureComputer() {
  const signatureComputerSettings: SignatureComputerSettings = {
    certificate: commonAssets.p12Certificate,
    password: "password",
  };

  return new SignatureComputer(signatureComputerSettings);
}
